#define STB_IMAGE_WRITE_IMPLEMENTATION
#include "stb_image_write.h"

#include <vector>
#include <chrono>

// #define PP_DEBUG

#include "pretty-poly.hpp"

using namespace std;
using namespace pretty_poly;

constexpr uint32_t WIDTH = 128;
constexpr uint32_t HEIGHT = 128;
uint8_t buf[WIDTH][HEIGHT];

uint32_t time() {
  std::chrono::milliseconds ms = std::chrono::duration_cast<std::chrono::milliseconds>(
      std::chrono::system_clock::now().time_since_epoch()
  );
  return ms.count();
}

void callback(const tile_t &tile) {
  debug_tile(tile);
  for(auto y = 0; y < tile.bounds.h; y++) {
    for(auto x = 0; x < tile.bounds.w; x++) {      
      buf[y + tile.bounds.y][x + tile.bounds.x] = tile.get_value(x, y) * (255 >> settings::antialias >> settings::antialias);
    }
  }
}

int main() {
  set_options(callback, X4, {0, 0, WIDTH, HEIGHT});
  
  // ampersand character generated by Pretty Alright Fonts made of three contours 
  // (made up of one outline and two holes)
  std::vector<int> ampersand_outline = { 
    16, 61, 14, 59, 12, 56, 11, 53, 10, 50, 9, 45, 9, 41, 12, 36, 16, 32, 20, 28, 31, 24, 35, 25, 39, 28, 43, 31, 46, 35, 50, 42, 48, 49, 40, 59, 36, 62, 47, 75, 48, 71, 50, 63, 64, 63, 63, 73, 57, 87, 69, 100, 50, 100, 46, 96, 43, 98, 40, 99, 37, 100, 33, 100, 27, 101, 21, 100, 15, 98, 10, 94, 6, 90, 3, 80, 3, 78, 4, 74, 6, 71, 9, 68, 16, 61
  };

  std::vector<int> ampersand_hole_1 { 
    24, 44, 24, 47, 28, 53, 32, 51, 33, 49, 34, 48, 35, 47, 36, 44, 35, 43, 35, 42, 34, 40, 32, 39, 30, 38, 28, 39, 27, 39, 26, 40, 25, 42
  };

  std::vector<int> ampersand_hole_2 { 
    28, 88, 31, 88, 37, 86, 24, 70, 23, 71, 21, 74, 20, 79, 20, 82, 21, 84, 22, 85, 24, 87
  };

  vector<contour_t<int>> contours = {
    contour_t<int>(ampersand_outline),
    contour_t<int>(ampersand_hole_1),
    contour_t<int>(ampersand_hole_2)
  };

  unsigned start = time();
  for(int i = 0; i < 1000; i++) {
    draw_polygon(contours);
  }
  printf("took %dms\n", time() - start);

  stbi_write_png("/tmp/out.png", WIDTH, HEIGHT, 1, (void *)buf, WIDTH);
  
  return 0;
}